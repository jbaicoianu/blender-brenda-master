{
  "name": "node-gearman",
  "description": "Simple Gearman client/worker module for Node.JS",
  "version": "0.2.2",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "homepage": "http://github.com/andris9/node-gearman",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/node-gearman.git"
  },
  "scripts": {
    "test": "node ./run_tests.js"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "main": "./lib/gearman",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/andris9/gearman/blob/master/LICENSE"
    }
  ],
  "engine": {
    "node": ">=0.5"
  },
  "keywords": [
    "gearman",
    "worker",
    "message queue"
  ],
  "readme": "# node-gearman\n\n**node-gearman** is an extremely simple Gearman client/worker module for Node.JS. You can register workers and you can submit jobs, that's all about it.\n\n[![Build Status](https://secure.travis-ci.org/andris9/node-gearman.png)](http://travis-ci.org/andris9/node-gearman)\n\n**NB!** Breaking API change - `'connected'` events etc are now called `'connect'`.\n\n## Support node-gearman development\n\n[![Donate to author](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=DB26KWR2BQX5W)\n\n## Installation\n\nInstall through *npm*\n\n    npm install node-gearman\n\n## Usage\n\nSee [examples](https://github.com/andris9/node-gearman/tree/master/examples) folder for sample scripts\n\n## Connect to a Gearman server\n\nSet up connection data and create a new `Gearman` object\n\n    var Gearman = require(\"node-gearman\");\n    var gearman = new Gearman(hostname, port);\n\nWhere `hostname` defaults to `\"localhost\"` and `port` to `4730`\n\nThis doesn't actually create the connection yet. Connection is created when needed but you can force it with `gearman.connect()`\n\n    var gearman = new Gearman(hostname, port);\n    gearman.connect();\n\n## Connection events\n\nThe following events can be listened for a `Gearman` object:\n\n  * **connect** - when the connection has been successfully established to the server\n  * **idle** - when there's no jobs available for workers\n  * **close** - connection closed\n  * **error** - an error occured. Connection is automatically closed.\n\nExample:\n\n    var gearman = new Gearman(hostname, port);\n    gearman.on(\"connect\", function(){\n        console.log(\"Connected to the server!\");\n    });\n    gearman.connect();\n\n## Submit a Job\n\nJobs can be submitted with `gearman.submitJob(name, payload)` where `name` is the name of the function and `payload` is a string or a Buffer. The returned object (Event Emitter) can be used to detect job status and has the following events:\n\n  * **error** - if the job failed, has parameter error\n  * **data** - contains a chunk of data as a Buffer\n  * **end** - when the job has been completed, has no parameters\n  * **timeout** - when the job has been canceled due to timeout\n\nExample:\n\n    var gearman = new Gearman(hostname, port);\n    var job = gearman.submitJob(\"reverse\", \"test string\");\n\n    job.on(\"data\", function(data){\n        console.log(data.toString(\"utf-8\")); // gnirts tset\n    });\n\n    job.on(\"end\", function(){\n        console.log(\"Job completed!\");\n    });\n\n    job.on(\"error\", function(error){\n        console.log(error.message);\n    });\n\n## Setup a Worker\n\nWorkers can be set up with `gearman.registerWorker(name, callback)` where `name` is the name of the function and `callback` is the function to be run when a job is received.\n\nWorker function `callback` gets two parameters - `payload` (received data as a Buffer) and `worker` which is a helper object to communicate with the server. `worker` object has following methods:\n\n  * **write(data)** - for sending data chunks to the client\n  * **end([data])** for completing the job\n  * **error()** to indicate that the job failed\n\nExample:\n\n    var gearman = new Gearman(hostname, port);\n\n    gearman.registerWorker(\"reverse\", function(payload, worker){\n        if(!payload){\n            worker.error();\n            return;\n        }\n        var reversed = payload.toString(\"utf-8\").split(\"\").reverse().join(\"\");\n        worker.end(reversed);\n    });\n\n## Job timeout\n\nYou can set an optional timeout value (in milliseconds) for a job to abort it automatically when the timeout occurs.\n\nTimeout automatically aborts further processing of the job.\n\n    job.setTimeout(timeout[, timeoutCallback]);\n\nIf `timeoutCallback` is not set, a `'timeout'` event is emitted on timeout.\n\n    job.setTimeout(10*1000); // timeout in 10 secs\n    job.on(\"timeout\", function(){\n        console.log(\"Timeout exceeded for the worker. Job aborted.\");\n    }); \n\n## Close connection\n\nYou can close the Geamrna connection with `close()`\n\n    var gearman = new Gearman();\n    ...\n    gearman.close();\n\nThe connection is closed when a `'close'` event for the Gearman object is emitted\n\n    gearman.on(\"close\", function(){\n        console.log(\"Connection closed\");\n    });\n    \n    gearman.close();\n\n## Streaming\n\nWorker and job objects also act as Stream objects (workers are writable and jobs readable streams), so you can stream data with `pipe` from a worker to a client (but not the other way round). This is useful for zipping/unzipping etc.\n\n**NB!** Streaming support is experimental, do not send very large files as the data tends to clutter up (workers stream interface lacks support for pausing etc.).\n\n**Streaming worker**\n\n    gearman.registerWorker(\"stream_file\", function(payload, worker){\n        var input = fs.createReadStream(filepath);\n        // stream file to client\n        input.pipe(worker);\n    });\n\n**Streaming client**\n\n    var job = gearman.submitJob(\"stream\", null),\n        output = fs.createWriteStream(filepath); \n    \n    // save incoming stream to file\n    job.pipe(output);\n\n## Run tests\n\nRun the tests with\n\n    npm test\n    \nor alternatively\n\n    node run_tests.js\n## License\n\n**MIT**",
  "readmeFilename": "README.md",
  "_id": "node-gearman@0.2.2",
  "dist": {
    "shasum": "ace212787c905c3edf5457a83206596ff871b074",
    "tarball": "http://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz"
  },
  "_from": "node-gearman@*",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "andris",
    "email": "andris@node.ee"
  },
  "directories": {},
  "_shasum": "ace212787c905c3edf5457a83206596ff871b074",
  "_resolved": "https://registry.npmjs.org/node-gearman/-/node-gearman-0.2.2.tgz"
}
